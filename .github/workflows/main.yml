name: Backend Build with Sonar

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  PG_DBNAME: energy_db
  PG_USER: admin
  PG_PASSWORD: admin123
  PG_HOST: localhost
  PG_PORT: 5432
  NODE_VERSION: '22'
  REDIS_HOST: localhost
  REDIS_PORT: 6379

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Build Backend
        run: npm run build
      - name: Check Build Output
        run: ls -la dist/
      - name: Verify Main File Exists
        run: |
          if [ ! -f dist/index.js ]; then
            echo "Error: dist/index.js not found"
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Install Redis Tools
        run: sudo apt-get update && sudo apt-get install -y redis-tools
      - name: Build Backend
        run: npm run build
      - name: Wait for Services
        run: |
          while ! pg_isready -h localhost -p 5432 -U ${{ env.PG_USER }} -d ${{ env.PG_DBNAME }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          while ! redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 5
          done
          sleep 10
      - name: Initialize Database
        env:
          PG_DBNAME: ${{ env.PG_DBNAME }}
          PG_USER: ${{ env.PG_USER }}
          PG_PASSWORD: ${{ env.PG_PASSWORD }}
          PG_HOST: ${{ env.PG_HOST }}
          PG_PORT: ${{ env.PG_PORT }}
        run: |
          echo "PG_HOST: $PG_HOST, PG_PORT: $PG_PORT, PG_USER: $PG_USER, PG_DBNAME: $PG_DBNAME"
          node test/setup-db.js || { echo "Database initialization failed"; cat test/setup-db.js; exit 1; }
      - name: Start Server in Background
        run: npm run start-server > server.log 2>&1 &
      - name: Wait for Server
        run: sleep 15
      - name: Check Server Status
        run: curl -I http://localhost:5000/ || echo "Server not running"
      - name: Run TypeScript Compilation for Tests
        run: npx tsc --project tsconfig.test.json
      - name: Run Tests with Mocha
        run: node ./node_modules/mocha/bin/mocha.js test-dist/test/**/*.js --exit
      - name: Display Server Logs
        if: always()
        run: cat server.log || echo "Server log not found"
      - name: Check Test Output
        if: failure()
        run: echo "Tests failed. Check the output above for details." && exit 1

  performance:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Install Redis Tools
        run: sudo apt-get update && sudo apt-get install -y redis-tools
      - name: Build Backend
        run: npm run build
      - name: Wait for Services
        run: |
          while ! pg_isready -h localhost -p 5432 -U ${{ env.PG_USER }} -d ${{ env.PG_DBNAME }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          while ! redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 5
          done
          sleep 10
      - name: Initialize Database
        env:
          PG_DBNAME: ${{ env.PG_DBNAME }}
          PG_USER: ${{ env.PG_USER }}
          PG_PASSWORD: ${{ env.PG_PASSWORD }}
          PG_HOST: ${{ env.PG_HOST }}
          PG_PORT: ${{ env.PG_PORT }}
        run: |
          echo "PG_HOST: $PG_HOST, PG_PORT: $PG_PORT, PG_USER: $PG_USER, PG_DBNAME: $PG_DBNAME"
          node test/setup-db.js || { echo "Database initialization failed"; cat test/setup-db.js; exit 1; }
      - name: Start Server
        run: npm run start-server &
      - name: Wait for Server
        run: sleep 15
      - name: Check Server Status
        run: curl -I http://localhost:5000/ || echo "Server not running"
      - name: Run Performance Tests
        run: npm run performance:test
      - name: Check Performance Output
        if: failure()
        run: echo "Performance tests failed. Check the output above for details." && exit 1

  integration:
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Install Redis Tools
        run: sudo apt-get update && sudo apt-get install -y redis-tools
      - name: Build Backend
        run: npm run build
      - name: Wait for Services
        run: |
          while ! pg_isready -h localhost -p 5432 -U ${{ env.PG_USER }} -d ${{ env.PG_DBNAME }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          while ! redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 5
          done
          sleep 10
      - name: Initialize Database
        env:
          PG_DBNAME: ${{ env.PG_DBNAME }}
          PG_USER: ${{ env.PG_USER }}
          PG_PASSWORD: ${{ env.PG_PASSWORD }}
          PG_HOST: ${{ env.PG_HOST }}
          PG_PORT: ${{ env.PG_PORT }}
        run: |
          echo "PG_HOST: $PG_HOST, PG_PORT: $PG_PORT, PG_USER: $PG_USER, PG_DBNAME: $PG_DBNAME"
          node test/setup-db.js || { echo "Database initialization failed"; cat test/setup-db.js; exit 1; }
      - name: Start Server
        run: npm run start-server &
      - name: Wait for Server
        run: sleep 15
      - name: Check Server Status
        run: curl -I http://localhost:5000/ || echo "Server not running"
      - name: Run Integration Tests
        run: npx tsc --project tsconfig.test.json && node ./node_modules/mocha/bin/mocha.js test-dist/test/**/*.js --exit
      - name: Display Server Logs
        if: always()
        run: cat server.log || echo "Server log not found"
      - name: Check Integration Output
        if: failure()
        run: echo "Integration tests failed. Check the output above for details." && exit 1
        
  sonarcloud:
    runs-on: ubuntu-latest
    needs: [build, test]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Install nyc for Coverage
        run: npm install --save-dev nyc
      - name: Install Redis Tools
        run: sudo apt-get update && sudo apt-get install -y redis-tools
      - name: Build Backend
        run: npm run build
      - name: Run TypeScript Compilation for Tests
        run: npx tsc --project tsconfig.test.json
      - name: Wait for Services
        run: |
          while ! pg_isready -h localhost -p 5432 -U ${{ env.PG_USER }} -d ${{ env.PG_DBNAME }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          while ! redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 5
          done
          sleep 10
      - name: Initialize Database
        env:
          PG_DBNAME: ${{ env.PG_DBNAME }}
          PG_USER: ${{ env.PG_USER }}
          PG_PASSWORD: ${{ env.PG_PASSWORD }}
          PG_HOST: ${{ env.PG_HOST }}
          PG_PORT: ${{ env.PG_PORT }}
        run: |
          echo "PG_HOST: $PG_HOST, PG_PORT: $PG_PORT, PG_USER: $PG_USER, PG_DBNAME: $PG_DBNAME"
          node test/setup-db.js || { echo "Database initialization failed"; cat test/setup-db.js; exit 1; }
      - name: Start Server in Background
        run: npm run start-server > server.log 2>&1 &
      - name: Wait for Server
        run: |
          for i in {1..30}; do
            if curl -I http://localhost:5000/ 2>/dev/null | grep -q "200"; then
              echo "Server is up!"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
            if [ $i -eq 30 ]; then
              echo "Server failed to start after 60 seconds"
              exit 1
            fi
          done
      - name: Check Server Status
        run: curl -I http://localhost:5000/ || echo "Server not running"
      - name: Run Tests with Coverage
        run: npx nyc --reporter=lcov --report-dir=coverage node ./node_modules/mocha/bin/mocha.js test-dist/test/**/*.js --exit
      - name: Check Coverage Output
        run: |
          ls -la coverage/ && cat coverage/lcov.info || echo "Coverage report not generated"
      - name: Debug Test Files
        run: |
          echo "Listing test files:"
          ls -la test-dist/test/
      - name: Debug Environment
        run: |
          echo "PG_HOST: $PG_HOST"
          echo "PG_PORT: $PG_PORT"
          echo "REDIS_HOST: $REDIS_HOST"
          echo "REDIS_PORT: $REDIS_PORT"
          ps aux | grep postgres
          ps aux | grep redis
      - name: Debug Server Logs
        if: always()
        run: cat server.log || echo "Server log not found"
      - name: Generate Random ID
        id: random
        run: echo "RANDOM_ID=$(date +%s%N | sha256sum | head -c 8)" >> $GITHUB_ENV
      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://sonarcloud.io"
        with:
          args: >
            -Dsonar.verbose=true
            -Dsonar.qualitygate.wait=true
            -Dsonar.projectKey=elmekadem-narjiss_Backend_Auth
            -Dsonar.organization=elmekadem-narjiss
            -Dsonar.sources=src
            -Dsonar.tests=test
            -Dsonar.test.inclusions=**/*.test.ts
            -Dsonar.exclusions=node_modules/**,dist/**,test-dist/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.projectName="Backend Build with Sonar_${{ env.RANDOM_ID }}"
      - name: Check SonarCloud Output
        if: failure()
        run: echo "SonarCloud scan failed. Check the output above for details." && exit 1


  
