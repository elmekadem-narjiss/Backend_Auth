name: Backend Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  PG_DBNAME: energy_db
  PG_USER: admin
  PG_PASSWORD: admin123
  PG_HOST: localhost
  PG_PORT: 5432
  NODE_VERSION: '22'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Build Backend
        run: npm run build
      - name: Check Build Output
        run: ls -la dist/
      - name: Verify Main File Exists
        run: |
          if [ ! -f dist/index.js ]; then
            echo "Error: dist/index.js not found"
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Initialize Database
        run: node test/setup-db.js
      - name: Run TypeScript Compilation
        run: npx tsc --project tsconfig.test.json
      - name: Fix Permissions & Run Mocha Tests
        run: |
          chmod +x ./node_modules/.bin/*
          node ./node_modules/mocha/bin/mocha.js test-dist/test/**/*.js --exit
      - name: Check Test Output
        if: failure()
        run: echo "Tests failed. Check the output above for details." && exit 1

  performance:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Debug Scripts
        run: npm run
      - name: Build Backend
        run: npm run build
      - name: Start Server
        run: npm run start-server &
      - name: Wait for Server
        run: sleep 15
      - name: Check Server Status
        run: curl -I http://localhost:5000/ || echo "Server not running"
      - name: Run Performance Tests
        run: npm run performance:test
      - name: Check Performance Output
        if: failure()
        run: echo "Performance tests failed. Check the output above for details." && exit 1

  integration:
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Build Backend
        run: npm run build
      - name: Start Server
        run: npm run start-server &
      - name: Wait for Server
        run: sleep 15
      - name: Check Server Status
        run: curl -I http://localhost:5000/ || echo "Server not running"
      - name: Run Integration Tests
        run: npx tsc --project tsconfig.test.json && node ./node_modules/mocha/bin/mocha.js test-dist/test/**/*.js --exit
      - name: Check Integration Output
        if: failure()
        run: echo "Integration tests failed. Check the output above for details." && exit 1

  sonarcloud:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Check SonarCloud Project Settings
        run: |
          echo "Fetching SonarCloud project settings for Automatic Analysis..."
          curl -X GET "https://sonarcloud.io/api/settings/values?component=elmekadem-narjiss_Backen_ML" \
            -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" > sonar_settings.json
          echo "SonarCloud settings response:"
          cat sonar_settings.json || echo "Failed to fetch settings"
          # Check if Automatic Analysis is enabled
          grep "sonar.automaticAnalysis.enabled" sonar_settings.json || echo "Automatic Analysis setting not found in response"
      - name: SonarCloud Scan with Enhanced Debugging
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.analysis.mode=publish
            -Dsonar.automaticAnalysis.disabled=true
            -Dsonar.verbose=true
            -X
