name: Backend Build with Sonar

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  schedule:
    - cron: '0 */3 * * *'  # Exécuter toutes les 3 heures

env:
  PG_DBNAME: energy_db
  PG_USER: admin
  PG_PASSWORD: admin123
  PG_HOST: localhost
  PG_PORT: 5432
  NODE_VERSION: '22'
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  AWS_REGION: 'eu-north-1'  # Ajustez selon votre région
  LOG_GROUP_NAME: '/github/actions/backend'  # Groupe de journaux spécifique au backend
  S3_BUCKET_NAME: 'my-frontend-builds-2025'  # Réutilise le bucket du frontend
  SNS_TOPIC_ARN: ${{ secrets.SNS_TOPIC_ARN }}  # Réutilise le topic SNS existant

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Build Backend
        run: npm run build
      - name: Check Build Output
        run: ls -la dist/
      - name: Verify Main File Exists
        run: |
          if [ ! -f dist/index.js ]; then
            echo "Error: dist/index.js not found"
            exit 1
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Afficher les variables pour débogage S3
        run: |
          echo "Bucket S3 : ${{ env.S3_BUCKET_NAME }}"
          echo "Région AWS : ${{ env.AWS_REGION }}"
      - name: Téléverser les artefacts sur S3
        run: |
          echo "Commande S3 : aws s3 cp dist/ s3://${{ env.S3_BUCKET_NAME }}/build-artifacts/backend/ --recursive"
          aws s3 cp dist/ s3://${{ env.S3_BUCKET_NAME }}/build-artifacts/backend/ --recursive
      - name: Vérifier le résultat S3
        run: aws s3 ls s3://${{ env.S3_BUCKET_NAME }}/build-artifacts/backend/ || echo "Échec de la vérification S3"
      - name: Envoyer les journaux de build à CloudWatch
        run: |
          MESSAGE="Etape de build terminee a $(date -u)"
          JSON_EVENTS="[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
          echo "JSON à envoyer : $JSON_EVENTS"
          aws logs create-log-group --log-group-name ${{ env.LOG_GROUP_NAME }} || true
          aws logs create-log-stream --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/build || true
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/build --log-events "$JSON_EVENTS"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Install Redis Tools
        run: sudo apt-get update && sudo apt-get install -y redis-tools
      - name: Build Backend
        run: npm run build
      - name: Wait for Services
        run: |
          while ! pg_isready -h localhost -p 5432 -U ${{ env.PG_USER }} -d ${{ env.PG_DBNAME }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          while ! redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 5
          done
          sleep 10
      - name: Initialize Database
        env:
          PG_DBNAME: ${{ env.PG_DBNAME }}
          PG_USER: ${{ env.PG_USER }}
          PG_PASSWORD: ${{ env.PG_PASSWORD }}
          PG_HOST: ${{ env.PG_HOST }}
          PG_PORT: ${{ env.PG_PORT }}
        run: |
          echo "PG_HOST: $PG_HOST, PG_PORT: $PG_PORT, PG_USER: $PG_USER, PG_DBNAME: $PG_DBNAME"
          node test/setup-db.js || { echo "Database initialization failed"; cat test/setup-db.js; exit 1; }
      - name: Start Server in Background
        run: npm run start-server > server.log 2>&1 &
      - name: Wait for Server
        run: sleep 15
      - name: Check Server Status
        run: curl -I http://localhost:5000/ || echo "Server not running"
      - name: Run TypeScript Compilation for Tests
        run: npx tsc --project tsconfig.test.json
      - name: Run Tests with Mocha
        run: node ./node_modules/mocha/bin/mocha.js test-dist/test/**/*.js --exit
      - name: Display Server Logs
        if: always()
        run: cat server.log || echo "Server log not found"
      - name: Check Test Output
        if: failure()
        run: echo "Tests failed. Check the output above for details." && exit 1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Envoyer les journaux de test à CloudWatch
        run: |
          MESSAGE="Etape de test terminee a $(date -u)"
          JSON_EVENTS="[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
          echo "JSON à envoyer : $JSON_EVENTS"
          aws logs create-log-group --log-group-name ${{ env.LOG_GROUP_NAME }} || true
          aws logs create-log-stream --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/test || true
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/test --log-events "$JSON_EVENTS"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  performance:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Install Redis Tools
        run: sudo apt-get update && sudo apt-get install -y redis-tools
      - name: Build Backend
        run: npm run build
      - name: Wait for Services
        run: |
          while ! pg_isready -h localhost -p 5432 -U ${{ env.PG_USER }} -d ${{ env.PG_DBNAME }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          while ! redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 5
          done
          sleep 10
      - name: Initialize Database
        env:
          PG_DBNAME: ${{ env.PG_DBNAME }}
          PG_USER: ${{ env.PG_USER }}
          PG_PASSWORD: ${{ env.PG_PASSWORD }}
          PG_HOST: ${{ env.PG_HOST }}
          PG_PORT: ${{ env.PG_PORT }}
        run: |
          echo "PG_HOST: $PG_HOST, PG_PORT: $PG_PORT, PG_USER: $PG_USER, PG_DBNAME: $PG_DBNAME"
          node test/setup-db.js || { echo "Database initialization failed"; cat test/setup-db.js; exit 1; }
      - name: Start Server
        run: npm run start-server &
      - name: Wait for Server
        run: sleep 15
      - name: Check Server Status
        run: curl -I http://localhost:5000/ || echo "Server not running"
      - name: Run Performance Tests
        run: npm run performance:test
      - name: Check Performance Output
        if: failure()
        run: echo "Performance tests failed. Check the output above for details." && exit 1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Envoyer les journaux de performance à CloudWatch
        run: |
          MESSAGE="Etape de performance terminee a $(date -u)"
          JSON_EVENTS="[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
          echo "JSON à envoyer : $JSON_EVENTS"
          aws logs create-log-group --log-group-name ${{ env.LOG_GROUP_NAME }} || true
          aws logs create-log-stream --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/performance || true
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/performance --log-events "$JSON_EVENTS"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  integration:
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.PG_DBNAME }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Install Redis Tools
        run: sudo apt-get update && sudo apt-get install -y redis-tools
      - name: Build Backend
        run: npm run build
      - name: Wait for Services
        run: |
          while ! pg_isready -h localhost -p 5432 -U ${{ env.PG_USER }} -d ${{ env.PG_DBNAME }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          while ! redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 5
          done
          sleep 10
      - name: Initialize Database
        env:
          PG_DBNAME: ${{ env.PG_DBNAME }}
          PG_USER: ${{ env.PG_USER }}
          PG_PASSWORD: ${{ env.PG_PASSWORD }}
          PG_HOST: ${{ env.PG_HOST }}
          PG_PORT: ${{ env.PG_PORT }}
        run: |
          echo "PG_HOST: $PG_HOST, PG_PORT: $PG_PORT, PG_USER: $PG_USER, PG_DBNAME: $PG_DBNAME"
          node test/setup-db.js || { echo "Database initialization failed"; cat test/setup-db.js; exit 1; }
      - name: Start Server
        run: npm run start-server &
      - name: Wait for Server
        run: sleep 15
      - name: Check Server Status
        run: curl -I http://localhost:5000/ || echo "Server not running"
      - name: Run Integration Tests
        run: npx tsc --project tsconfig.test.json && node ./node_modules/mocha/bin/mocha.js test-dist/test/**/*.js --exit
      - name: Display Server Logs
        if: always()
        run: cat server.log || echo "Server log not found"
      - name: Check Integration Output
        if: failure()
        run: echo "Integration tests failed. Check the output above for details." && exit 1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Envoyer les journaux d'intégration à CloudWatch
        run: |
          MESSAGE="Etape d'integration terminee a $(date -u)"
          JSON_EVENTS="[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
          echo "JSON à envoyer : $JSON_EVENTS"
          aws logs create-log-group --log-group-name ${{ env.LOG_GROUP_NAME }} || true
          aws logs create-log-stream --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/integration || true
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/integration --log-events "$JSON_EVENTS"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  amplify-deploy:
    runs-on: ubuntu-latest
    needs: [build, test, performance, integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Trigger Amplify Build
        run: |
          aws amplify start-job \
            --app-id ${{ secrets.AMPLIFY_APP_ID_BACKEND }} \
            --branch-name main \
            --job-type RELEASE
      - name: Afficher les variables pour débogage SNS
        run: |
          echo "ARN SNS : ${{ env.SNS_TOPIC_ARN }}"
          echo "Message à envoyer : Déploiement Backend terminé avec succès à $(date -u)"
      - name: Envoyer une notification SNS en cas de succès
        run: |
          echo "Commande SNS : aws sns publish --topic-arn ${{ env.SNS_TOPIC_ARN }} --message \"Déploiement Backend terminé avec succès à $(date -u)\""
          aws sns publish --topic-arn ${{ env.SNS_TOPIC_ARN }} --message "Déploiement Backend terminé avec succès à $(date -u)" --output json
        if: success()
      - name: Envoyer une notification SNS en cas d'échec
        run: |
          echo "Commande SNS : aws sns publish --topic-arn ${{ env.SNS_TOPIC_ARN }} --message \"Déploiement Backend a échoué à $(date -u)\""
          aws sns publish --topic-arn ${{ env.SNS_TOPIC_ARN }} --message "Déploiement Backend a échoué à $(date -u)" --output json
        if: failure()
      - name: Envoyer les journaux de déploiement à CloudWatch
        run: |
          MESSAGE="Deploiement Amplify termine a $(date -u)"
          JSON_EVENTS="[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
          echo "JSON à envoyer : $JSON_EVENTS"
          aws logs create-log-group --log-group-name ${{ env.LOG_GROUP_NAME }} || true
          aws logs create-log-stream --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/deploy || true
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/deploy --log-events "$JSON_EVENTS"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}



